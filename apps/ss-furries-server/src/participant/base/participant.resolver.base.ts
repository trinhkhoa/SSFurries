/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Participant } from "./Participant";
import { ParticipantCountArgs } from "./ParticipantCountArgs";
import { ParticipantFindManyArgs } from "./ParticipantFindManyArgs";
import { ParticipantFindUniqueArgs } from "./ParticipantFindUniqueArgs";
import { CreateParticipantArgs } from "./CreateParticipantArgs";
import { UpdateParticipantArgs } from "./UpdateParticipantArgs";
import { DeleteParticipantArgs } from "./DeleteParticipantArgs";
import { ParticipantService } from "../participant.service";
@graphql.Resolver(() => Participant)
export class ParticipantResolverBase {
  constructor(protected readonly service: ParticipantService) {}

  async _participantsMeta(
    @graphql.Args() args: ParticipantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Participant])
  async participants(
    @graphql.Args() args: ParticipantFindManyArgs
  ): Promise<Participant[]> {
    return this.service.participants(args);
  }

  @graphql.Query(() => Participant, { nullable: true })
  async participant(
    @graphql.Args() args: ParticipantFindUniqueArgs
  ): Promise<Participant | null> {
    const result = await this.service.participant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Participant)
  async createParticipant(
    @graphql.Args() args: CreateParticipantArgs
  ): Promise<Participant> {
    return await this.service.createParticipant({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Participant)
  async updateParticipant(
    @graphql.Args() args: UpdateParticipantArgs
  ): Promise<Participant | null> {
    try {
      return await this.service.updateParticipant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Participant)
  async deleteParticipant(
    @graphql.Args() args: DeleteParticipantArgs
  ): Promise<Participant | null> {
    try {
      return await this.service.deleteParticipant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
